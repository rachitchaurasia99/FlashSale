require 'rails_helper'

RSpec.describe Deal, type: :model do
  subject { Deal.new(title: 'abcd', description: 'This is a random deal', price_in_cents: 10000, discount_price_in_cents: 9000, quantity: 12, tax_percentage: 10, publish_at: Time.current) }

  describe 'associations' do
    it { should have_many(:deal_images).dependent(:destroy) }
    it { should have_many(:line_items).dependent(:restrict_with_error) }
    it { should have_many(:orders).through(:line_items) }
    it { should accept_nested_attributes_for(:deal_images) }
  end

  describe 'validations' do
    it { should validate_presence_of(:title) }
    it { should validate_presence_of(:description) }
    it { should validate_presence_of(:price_in_cents) }
    it { should validate_presence_of(:discount_price_in_cents) }
    it { should validate_presence_of(:quantity) }
    it { should validate_presence_of(:tax_percentage) }
    it { should validate_presence_of(:publish_at) }
    it { should validate_numericality_of(:discount_price_in_cents) }
  end

  describe 'callbacks' do
    it { is_expected.to callback(:calculate_tax_on_deal).before(:validation) }
  end

  describe 'scope' do
    describe '#all_deals' do
      context 'when no deals exist' do
        it 'should not return any deal' do
          expect(Deal.all_deals).to be_empty
        end
      end

      context 'when at least one deal exist' do
        it 'should return deals' do
          deal = create(:deal)
          expect(Deal.all_deals).to include(deal)
        end
      end
    end

    describe '#live' do
      context 'there are no live deal' do
        it 'should return empty list' do
          expect(Deal.live).to be_empty
        end
      end

      context 'when at least one live deal exist' do
        it 'should return live deals' do
          deal1 =  create(:deal, published_at: Time.current, publishable: true)
          deal2 =  create(:deal, published_at: 1.day.ago, publishable: false)
          expect(Deal.live).to include(deal1)
          expect(Deal.live).not_to include(deal2)
        end
      end
    end

    describe '#expired' do
      context 'there are no expired deal' do
        it 'should return empty list' do
          expect(Deal.expired).to be_empty
        end
      end

      context 'when at least one expired deal exist' do
        it 'should return expired deals' do
          deal1 = create(:deal, published_at: 1.day.ago, publishable: false)
          deal2 =  create(:deal, published_at: Time.current, publishable: true)
          expect(Deal.expired).to include(deal1)
          expect(Deal.expired).not_to include(deal2)
        end
      end
    end

    describe '#deals_with_revenue' do
      let!(:user) { create(:user) }
      let!(:deal) { create(:deal) }
      let!(:line_items) { create_list(:line_item, 2, order: create(:order, user: create(:user), address: create(:address, user: user), status: :delivered), deal: deal) }
      it 'should return revenue generated by each deal' do
        expect(Deal.deals_with_revenue.first.orders_count).to eq(2)
      end
    end
  end
end
